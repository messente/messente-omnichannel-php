<?php
/**
 * Omnimessage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Omnichannel API
 *
 * This is the beta version of Omnichannel API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: admin@messente.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Omnimessage Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Omnimessage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Omnimessage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'scenarios' => '\Swagger\Client\Model\Scenarios',
        'viber' => '\Swagger\Client\Model\Viber',
        'sms' => '\Swagger\Client\Model\SMS',
        'to' => 'string',
        'drl_url' => 'string',
        'time_to_send' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'scenarios' => null,
        'viber' => null,
        'sms' => null,
        'to' => null,
        'drl_url' => null,
        'time_to_send' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scenarios' => 'scenarios',
        'viber' => 'viber',
        'sms' => 'sms',
        'to' => 'to',
        'drl_url' => 'drl_url',
        'time_to_send' => 'time_to_send'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scenarios' => 'setScenarios',
        'viber' => 'setViber',
        'sms' => 'setSms',
        'to' => 'setTo',
        'drl_url' => 'setDrlUrl',
        'time_to_send' => 'setTimeToSend'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scenarios' => 'getScenarios',
        'viber' => 'getViber',
        'sms' => 'getSms',
        'to' => 'getTo',
        'drl_url' => 'getDrlUrl',
        'time_to_send' => 'getTimeToSend'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['scenarios'] = isset($data['scenarios']) ? $data['scenarios'] : null;
        $this->container['viber'] = isset($data['viber']) ? $data['viber'] : null;
        $this->container['sms'] = isset($data['sms']) ? $data['sms'] : null;
        $this->container['to'] = isset($data['to']) ? $data['to'] : null;
        $this->container['drl_url'] = isset($data['drl_url']) ? $data['drl_url'] : null;
        $this->container['time_to_send'] = isset($data['time_to_send']) ? $data['time_to_send'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['scenarios'] === null) {
            $invalidProperties[] = "'scenarios' can't be null";
        }
        if ($this->container['to'] === null) {
            $invalidProperties[] = "'to' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['scenarios'] === null) {
            return false;
        }
        if ($this->container['to'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets scenarios
     *
     * @return \Swagger\Client\Model\Scenarios
     */
    public function getScenarios()
    {
        return $this->container['scenarios'];
    }

    /**
     * Sets scenarios
     *
     * @param \Swagger\Client\Model\Scenarios $scenarios scenarios
     *
     * @return $this
     */
    public function setScenarios($scenarios)
    {
        $this->container['scenarios'] = $scenarios;

        return $this;
    }

    /**
     * Gets viber
     *
     * @return \Swagger\Client\Model\Viber
     */
    public function getViber()
    {
        return $this->container['viber'];
    }

    /**
     * Sets viber
     *
     * @param \Swagger\Client\Model\Viber $viber viber
     *
     * @return $this
     */
    public function setViber($viber)
    {
        $this->container['viber'] = $viber;

        return $this;
    }

    /**
     * Gets sms
     *
     * @return \Swagger\Client\Model\SMS
     */
    public function getSms()
    {
        return $this->container['sms'];
    }

    /**
     * Sets sms
     *
     * @param \Swagger\Client\Model\SMS $sms sms
     *
     * @return $this
     */
    public function setSms($sms)
    {
        $this->container['sms'] = $sms;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string $to to
     *
     * @return $this
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets drl_url
     *
     * @return string
     */
    public function getDrlUrl()
    {
        return $this->container['drl_url'];
    }

    /**
     * Sets drl_url
     *
     * @param string $drl_url drl_url
     *
     * @return $this
     */
    public function setDrlUrl($drl_url)
    {
        $this->container['drl_url'] = $drl_url;

        return $this;
    }

    /**
     * Gets time_to_send
     *
     * @return string
     */
    public function getTimeToSend()
    {
        return $this->container['time_to_send'];
    }

    /**
     * Sets time_to_send
     *
     * @param string $time_to_send time_to_send
     *
     * @return $this
     */
    public function setTimeToSend($time_to_send)
    {
        $this->container['time_to_send'] = $time_to_send;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


